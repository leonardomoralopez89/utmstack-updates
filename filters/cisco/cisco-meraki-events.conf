filter {
    if [type] == "syslog" {
        if ([message] =~ /meraki/) or ([message] =~ /\b events \b/) or ([message] =~ /\bairmarshal_events\b/) {
        mutate {
            add_field => {
                "dataType" => "firewall-meraki"
            }
            rename => {
                "host" => "dataSource"
            }
        }

        mutate {
            gsub => ["message", "[\r]", ""]
        }

        mutate {
            add_field => {
                "[logx][meraki][kind]" => "events"
            }
        }

        if [message] =~ /\bairmarshal_events\b/ {
            ruby {
                code => "event.set('[logx][meraki][kindTags]', ['airmarshal_events'])"
            }
        }

        grok {
            match => {
                "message" => "%{GREEDYDATA:before} events %{GREEDYDATA:after}"
            }
            match => {
                "message" => "%{GREEDYDATA:before} airmarshal_events %{GREEDYDATA:after}"
            }
        }

        if [before] {
            grok {
                match => {
                    "before" => "%{TIMESTAMP_ISO8601:timestamp} %{IP:ip} %{BASE10NUM:bytes} %{BASE10NUM:epoch_time} %{WORD:device_name}"
                }
                match => {
                    "before" => "%{TIMESTAMP_ISO8601:timestamp} %{IP:ip} %{BASE10NUM:epoch_time} %{WORD:device_name}"
                }
                match => {
                    "before" => "%{CISCOTIMESTAMP:timestamp} %{IP:ip} %{BASE10NUM:bytes} %{BASE10NUM:epoch_time} %{WORD:device_name}"
                }
                match => {
                    "before" => "%{CISCOTIMESTAMP:timestamp} %{IP:ip} %{BASE10NUM:epoch_time} %{WORD:device_name}"
                }
                match => {
                    "before" => "%{BASE10NUM:epoch_time} %{WORD:device_name}"
                }
            }

            if [epoch_time] and [epoch_time] != "0.0" {
                date {
                    match => ["epoch_time", "UNIX"]
                }
            }
            else if [timestamp] {
                date {
                    match => ["timestamp", "MMM dd HH:mm:ss"]
                }
            }

            if [ip] {
                mutate {
                    rename => {
                        "ip" => "[logx][meraki][ip]"
                    }
                }
            }

            if [bytes] {
                mutate {
                    rename => {
                        "bytes" => "[logx][meraki][bytes]"
                    }

                    convert => {
                        "[logx][meraki][bytes]" => "integer"
                    }
                }
            }

            if [device_name] {
                mutate {
                    rename => {
                        "device_name" => "[logx][meraki][deviceName]"
                    }
                }
            }

            mutate {
                remove_field => ["before", "epoch_time", "timestamp"]
            }
        }

        if [after] {
            if [after] =~ /\btype\b=/ {
                grok {
                    match => {
                        "after" => "type=%{WORD:type} %{GREEDYDATA}"
                    }
                    match => {
                        "after" => "type=%{WORD:type}$"
                    }
                }
                mutate {
                    rename => {
                        "type" => "[logx][meraki][details][type]"
                    }
                }
            }

            if [after] =~ /\bvpn_type\b=/ {
                grok {
                    match => {
                        "after" => "vpn_type='%{DATA:vpn_type}'"
                    }
                }
                mutate {
                    rename => {
                        "vpn_type" => "[logx][meraki][details][vpnType]"
                    }
                }
            }

            if [after] =~ /\bpeer_contact\b=/ {
                grok {
                    match => {
                        "after" => "peer_contact='%{IPORHOST:peer_contact_host}:%{POSINT:peer_contact_port}'"
                    }
                }
                mutate {
                    rename => {
                        "peer_contact_host" => "[logx][meraki][details][peerContactHost]"
                        "peer_contact_port" => "[logx][meraki][details][peerContactPort]"
                    }

                    convert => {
                        "[logx][meraki][details][peerContactPort]" => "integer"
                    }
                }
            }

            if [after] =~ /\bpeer_ident\b=/ {
                grok {
                    match => {
                        "after" => "peer_ident='%{DATA:peer_ident}'"
                    }
                }
                mutate {
                    rename => {
                        "peer_ident" => "[logx][meraki][details][peerIdent]"
                    }
                }
            }

            if [after] =~ /\bconnectivity\b=/ {
                grok {
                    match => {
                        "after" => "connectivity='%{WORD:connectivity}'"
                    }
                }
                mutate {
                    rename => {
                        "connectivity" => "[logx][meraki][details][connectivity]"
                    }
                    convert => {
                        "[logx][meraki][details][connectivity]" => "boolean"
                    }
                }
            }

            if [after] =~ /\bport\b=/ {
                grok {
                    match => {
                        "after" => "port='%{DATA:port}'"
                    }
                }
                mutate {
                    rename => {
                        "port" => "[logx][meraki][details][port]"
                    }
                    convert => {
                        "[logx][meraki][details][port]" => "integer"
                    }
                }
            }

            if [after] =~ /\bidentity\b=/ {
                grok {
                    match => {
                        "after" => "identity='%{DATA:identity}'"
                    }
                }
                mutate {
                    rename => {
                        "identity" => "[logx][meraki][details][identity]"
                    }
                }
            }

            if [after] =~ /\bradio\b=/ {
                grok {
                    match => {
                        "after" => "radio='%{NUMBER:radio}'"
                    }
                }
                mutate {
                    rename => {
                        "radio" => "[logx][meraki][details][radio]"
                    }
                    convert => {
                        "[logx][meraki][details][radio]" => "integer"
                    }
                }
            }

            if [after] =~ /\bvap\b=/ {
                grok {
                    match => {
                        "after" => "vap='%{NUMBER:vap}'"
                    }
                }
                mutate {
                    rename => {
                        "vap" => "[logx][meraki][details][vap]"
                    }
                    convert => {
                        "[logx][meraki][details][vap]" => "integer"
                    }
                }
            }

            if [after] =~ /\bchannel\b=/ {
                grok {
                    match => {
                        "after" => "channel='%{NUMBER:channel}'"
                    }
                }
                mutate {
                    rename => {
                        "channel" => "[logx][meraki][details][channel]"
                    }
                    convert => {
                        "[logx][meraki][details][channel]" => "integer"
                    }
                }
            }

            if [after] =~ /\brssi\b=/ {
                grok {
                    match => {
                        "after" => "rssi='%{NUMBER:rssi}'"
                    }
                }
                mutate {
                    rename => {
                        "rssi" => "[logx][meraki][details][rssi]"
                    }
                    convert => {
                        "[logx][meraki][details][rssi]" => "integer"
                    }
                }
            }

            if [after] =~ /\baid\b=/ {
                grok {
                    match => {
                        "after" => "aid='%{NUMBER:aid}'"
                    }
                }
                mutate {
                    rename => {
                        "aid" => "[logx][meraki][details][aid]"
                    }
                    convert => {
                        "[logx][meraki][details][aid]" => "integer"
                    }
                }
            }

            if [after] =~ /\breason\b=/ {
                grok {
                    match => {
                        "after" => "reason='%{DATA:reason}'"
                    }
                }
                mutate {
                    rename => {
                        "reason" => "[logx][meraki][details][reason]"
                    }
                }
            }

            if [after] =~ /\binstigator\b=/ {
                grok {
                    match => {
                        "after" => "instigator='%{DATA:instigator}'"
                    }
                }
                mutate {
                    rename => {
                        "instigator" => "[logx][meraki][details][instigator]"
                    }
                }
            }

            if [after] =~ /\bduration\b=/ {
                grok {
                    match => {
                        "after" => "duration='%{BASE10NUM:duration}'"
                    }
                }
                mutate {
                    rename => {
                        "duration" => "[logx][meraki][details][duration]"
                    }
                }
            }

            if [after] =~ /\bauth_neg_dur\b=/ {
                grok {
                    match => {
                        "after" => "auth_neg_dur='%{BASE10NUM:auth_neg_dur}'"
                    }
                }
                mutate {
                    rename => {
                        "auth_neg_dur" => "[logx][meraki][details][authNegDur]"
                    }
                }
            }

            if [after] =~ /\blast_auth_ago\b=/ {
                grok {
                    match => {
                        "after" => "last_auth_ago='%{BASE10NUM:last_auth_ago}'"
                    }
                }
                mutate {
                    rename => {
                        "last_auth_ago" => "[logx][meraki][details][lastAuthAgo]"
                    }
                }
            }

            if [after] =~ /\bis_wpa\b=/ {
                grok {
                    match => {
                        "after" => "is_wpa='%{BASE10NUM:is_wpa}'"
                    }
                }
                mutate {
                    rename => {
                        "is_wpa" => "[logx][meraki][details][isWap]"
                    }
                }
            }

            if [after] =~ /\bfull_conn\b=/ {
                grok {
                    match => {
                        "after" => "full_conn='%{BASE10NUM:full_conn}'"
                    }
                }
                mutate {
                    rename => {
                        "full_conn" => "[logx][meraki][details][fullConn]"
                    }
                }
            }

            if [after] =~ /\bip_resp\b=/ {
                grok {
                    match => {
                        "after" => "ip_resp='%{BASE10NUM:ip_resp}'"
                    }
                }
                mutate {
                    rename => {
                        "ip_resp" => "[logx][meraki][details][ipResp]"
                    }
                }
            }

            if [after] =~ /\bip_src\b=/ {
                grok {
                    match => {
                        "after" => "ip_src='%{IPORHOST:ip_src}'"
                    }
                }
                mutate {
                    rename => {
                        "ip_src" => "[logx][meraki][src_ip]"
                    }
                }
            }

            if [after] =~ /\barp_resp\b=/ {
                grok {
                    match => {
                        "after" => "arp_resp='%{BASE10NUM:arp_resp}'"
                    }
                }
                mutate {
                    rename => {
                        "arp_resp" => "[logx][meraki][details][arpResp]"
                    }
                }
            }

            if [after] =~ /\barp_src\b=/ {
                grok {
                    match => {
                        "after" => "arp_src='%{IPORHOST:arp_src}'"
                    }
                }
                mutate {
                    rename => {
                        "arp_src" => "[logx][meraki][details][arpSrc]"
                    }
                }
            }

            if [after] =~ /\bdns_server\b=/ {
                grok {
                    match => {
                        "after" => "dns_server='%{IPORHOST:dns_server}'"
                    }
                }
                mutate {
                    rename => {
                        "dns_server" => "[logx][meraki][details][dnsServer]"
                    }
                }
            }

            if [after] =~ /\bdns_req_rtt\b=/ {
                grok {
                    match => {
                        "after" => "dns_req_rtt='%{BASE10NUM:dns_req_rtt}'"
                    }
                }
                mutate {
                    rename => {
                        "dns_req_rtt" => "[logx][meraki][details][dnsReqRtt]"
                    }
                }
            }

            if [after] =~ /\bdns_resp\b=/ {
                grok {
                    match => {
                        "after" => "dns_resp='%{BASE10NUM:dns_resp}'"
                    }
                }
                mutate {
                    rename => {
                        "dns_resp" => "[logx][meraki][details][dnsResp]"
                    }
                }
            }

            if [after] =~ /\bauth_neg_failed\b=/ {
                grok {
                    match => {
                        "after" => "auth_neg_failed='%{BASE10NUM:auth_neg_failed}'"
                    }
                }
                mutate {
                    rename => {
                        "auth_neg_failed" => "[logx][meraki][details][authNegFailed]"
                    }
                }
            }

            if [after] =~ /\bip\b=/ {
                grok {
                    match => {
                        "after" => "ip='%{DATA:ip}'"
                    }
                }
                mutate {
                    rename => {
                        "ip" => "[logx][meraki][details][ip]"
                    }
                }
            }

            if [after] =~ /\bdownload\b=/ {
                grok {
                    match => {
                        "after" => "download='%{DATA:download}'"
                    }
                }
                mutate {
                    rename => {
                        "download" => "[logx][meraki][details][download]"
                    }
                }
            }

            if [after] =~ /\bupload\b=/ {
                grok {
                    match => {
                        "after" => "upload='%{DATA:upload}'"
                    }
                }
                mutate {
                    rename => {
                        "upload" => "[logx][meraki][details][upload]"
                    }
                }
            }

            if [after] =~ /\bpacket\b=/ {
                grok {
                    match => {
                        "after" => "packet='%{DATA:packet}'"
                    }
                }
                mutate {
                    rename => {
                        "packet" => "[logx][meraki][details][packet]"
                    }
                }
            }

            if [after] =~ /\bdevice\b=/ {
                grok {
                    match => {
                        "after" => "device='%{DATA:device}'"
                    }
                }
                mutate {
                    rename => {
                        "device" => "[logx][meraki][details][device]"
                    }
                }
            }

            if [after] =~ /\bstate\b=/ {
                grok {
                    match => {
                        "after" => "state='%{WORD:state}'"
                    }
                }
                mutate {
                    rename => {
                        "state" => "[logx][meraki][details][state]"
                    }
                }
            }

            if [after] =~ /\balarm_id\b=/ {
                grok {
                    match => {
                        "after" => "alarm_id='%{DATA:alarm_id}'"
                    }
                }
                mutate {
                    rename => {
                        "alarm_id" => "[logx][meraki][details][alarmId]"
                    }
                }
            }

            if [after] =~ /\bdos_count\b=/ {
                grok {
                    match => {
                        "after" => "dos_count='%{DATA:dos_count}'"
                    }
                }
                mutate {
                    rename => {
                        "dos_count" => "[logx][meraki][details][dosCount]"
                    }
                }
            }

            if [after] =~ /\binter_arrival\b=/ {
                grok {
                    match => {
                        "after" => "inter_arrival='%{DATA:inter_arrival}'"
                    }
                }
                mutate {
                    rename => {
                        "inter_arrival" => "[logx][meraki][details][interArrival]"
                    }
                }
            }

            if [after] =~ /\bssid\b=/ {
                grok {
                    match => {
                        "after" => "ssid='%{DATA:ssid}'"
                    }
                }
                mutate {
                    rename => {
                        "ssid" => "[logx][meraki][details][ssid]"
                    }
                }
            }

            if [after] =~ /\bbssid\b=/ {
                grok {
                    match => {
                        "after" => "bssid='%{DATA:bssid}'"
                    }
                }
                mutate {
                    rename => {
                        "bssid" => "[logx][meraki][details][bssid]"
                    }
                }
            }

            if [after] =~ /\bsrc\b=/ {
                grok {
                    match => {
                        "after" => "src='%{DATA:src}'"
                    }
                }
                mutate {
                    rename => {
                        "src" => "[logx][meraki][details][src]"
                    }
                }
            }

            if [after] =~ /\bdst\b=/ {
                grok {
                    match => {
                        "after" => "dst='%{DATA:dst}'"
                    }
                }
                mutate {
                    rename => {
                        "dst" => "[logx][meraki][dest_ip]"
                    }
                }
            }

            if [after] =~ /\bwired_mac\b=/ {
                grok {
                    match => {
                        "after" => "wired_mac='%{DATA:wired_mac}'"
                    }
                }
                mutate {
                    rename => {
                        "wired_mac" => "[logx][meraki][details][wiredMac]"
                    }
                }
            }

            if [after] =~ /\bvlan_id\b=/ {
                grok {
                    match => {
                        "after" => "vlan_id='%{DATA:vlan_id}'"
                    }
                }
                mutate {
                    rename => {
                        "vlan_id" => "[logx][meraki][details][vlanId]"
                    }
                }
            }

            if [after] =~ /\bfc_type\b=/ {
                grok {
                    match => {
                        "after" => "fc_type='%{DATA:fc_type}'"
                    }
                }
                mutate {
                    rename => {
                        "fc_type" => "[logx][meraki][details][fcType]"
                    }
                }
            }

            if [after] =~ /\bfc_subtype\b=/ {
                grok {
                    match => {
                        "after" => "fc_subtype='%{DATA:fc_subtype}'"
                    }
                }
                mutate {
                    rename => {
                        "fc_subtype" => "[logx][meraki][details][fcSubtype]"
                    }
                }
            }

            mutate {
                remove_field => ["after"]
            }
        }
        mutate {
            remove_field => ["path", "@version", "message", "tags"]
        }
    }
    }
}