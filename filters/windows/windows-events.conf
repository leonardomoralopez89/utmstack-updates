filter {
    if [type] == "wineventlog" {
        mutate {
            add_field => { "dataType" => "wineventlog" }
            rename => [ "[beat][name]" , "[dataSource]" ]

            rename => ["type", "[logx][type]"]
            add_field => {"[global][type]" => "logx"}
            remove_field => ["fileset"]
            remove_field => ["fields"]

            rename => ["activity_id", "[logx][wineventlog][activity_id]"]
            rename => ["beat", "[logx][wineventlog][beat]"]
            rename => ["clienthost", "[logx][wineventlog][clienthost]"]
            rename => ["event", "[logx][wineventlog][event]"]
            rename => ["event_data", "[logx][wineventlog][event_data]"]
            rename => ["event_id", "[logx][wineventlog][event_id]"]
            rename => ["geoip", "[logx][wineventlog][geoip]"]
            rename => ["host", "[logx][wineventlog][host]"]
            rename => ["input", "[logx][wineventlog][input]"]
            rename => ["keywords", "[logx][wineventlog][keywords]"]
            rename => ["level", "[logx][wineventlog][level]"]
            rename => ["log", "[logx][wineventlog][log]"]
            rename => ["log_name", "[logx][wineventlog][log_name]"]
            rename => ["log_timestamp", "[logx][wineventlog][log_timestamp]"]
            rename => ["message", "[logx][wineventlog][message]"]
            rename => ["method", "[logx][wineventlog][method]"]
            rename => ["offset", "[logx][wineventlog][offset]"]
            rename => ["opcode", "[logx][wineventlog][opcode]"]
            rename => ["page", "[logx][wineventlog][page]"]
            rename => ["port", "[logx][wineventlog][port]"]
            rename => ["process_id", "[logx][wineventlog][process_id]"]
            rename => ["prospector", "[logx][wineventlog][prospector]"]
            rename => ["provider_guid", "[logx][wineventlog][provider_guid]"]
            rename => ["querystring", "[logx][wineventlog][querystring]"]
            rename => ["record_number", "[logx][wineventlog][record_number]"]
            rename => ["referer", "[logx][wineventlog][referer]"]
            rename => ["response", "[logx][wineventlog][response]"]
            rename => ["scstatus", "[logx][wineventlog][scstatus]"]
            rename => ["site", "[logx][wineventlog][site]"]
            rename => ["source", "[logx][wineventlog][source]"]
            rename => ["source_name", "[logx][wineventlog][source_name]"]
            rename => ["subresponse", "[logx][wineventlog][subresponse]"]
            rename => ["tags", "[logx][wineventlog][tags]"]
            rename => ["task", "[logx][wineventlog][task]"]
            rename => ["thread_id", "[logx][wineventlog][thread_id]"]
            rename => ["timetaken", "[logx][wineventlog][timetaken]"]
            rename => ["user", "[logx][wineventlog][user]"]
            rename => ["user_data", "[logx][wineventlog][user_data]"]
            rename => ["useragent", "[logx][wineventlog][useragent]"]
            rename => ["username", "[logx][wineventlog][username]"]
            rename => ["version", "[logx][wineventlog][version]"]
        }

        if [logx][wineventlog][event_id] == 1100 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The event logging service has shut down"}
            }
        }
        else if [logx][wineventlog][event_id] == 1101 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Audit events have been dropped by the transport."}
            }
        }
        else if [logx][wineventlog][event_id] == 1102 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The audit log was cleared"}
            }
        }
        else if [logx][wineventlog][event_id] == 1104 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The security Log is now full"}
            }
        }
        else if [logx][wineventlog][event_id] == 1105 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Event log automatic backup"}
            }
        }
        else if [logx][wineventlog][event_id] == 1108 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The event logging service encountered an error"}
            }
        }
        else if [logx][wineventlog][event_id] == 4608 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows is starting up"}
            }
        }
        else if [logx][wineventlog][event_id] == 4609 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows is shutting down"}
            }
        }
        else if [logx][wineventlog][event_id] == 4610 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An authentication package has been loaded by the Local Security Authority"}
            }
        }
        else if [logx][wineventlog][event_id] == 4611 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A trusted logon process has been registered with the Local Security Authority"}
            }
        }
        else if [logx][wineventlog][event_id] == 4612 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Internal resources allocated for the queuing of audit messages have been exhausted: leading to the loss of some audits."}
            }
        }
        else if [logx][wineventlog][event_id] == 4614 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A notification package has been loaded by the Security Account Manager."}
            }
        }
        else if [logx][wineventlog][event_id] == 4615 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Invalid use of LPC port"}
            }
        }
        else if [logx][wineventlog][event_id] == 4616 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The system time was changed."}
            }
        }
        else if [logx][wineventlog][event_id] == 4618 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A monitored security event pattern has occurred"}
            }
        }
        else if [logx][wineventlog][event_id] == 4621 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Administrator recovered system from CrashOnAuditFail"}
            }
        }
        else if [logx][wineventlog][event_id] == 4622 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security package has been loaded by the Local Security Authority."}
            }
        }
        else if [logx][wineventlog][event_id] == 4624 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An account was successfully logged on"}
            }
        }
        else if [logx][wineventlog][event_id] == 4625 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An account failed to log on"}
            }
        }
        else if [logx][wineventlog][event_id] == 4626 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "User/Device claims information"}
            }
        }
        else if [logx][wineventlog][event_id] == 4627 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Group membership information."}
            }
        }
        else if [logx][wineventlog][event_id] == 4634 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An account was logged off"}
            }
        }
        else if [logx][wineventlog][event_id] == 4646 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IKE DoS-prevention mode started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4647 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "User initiated logoff"}
            }
        }
        else if [logx][wineventlog][event_id] == 4648 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A logon was attempted using explicit credentials"}
            }
        }
        else if [logx][wineventlog][event_id] == 4649 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A replay attack was detected"}
            }
        }
        else if [logx][wineventlog][event_id] == 4650 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Main Mode security association was established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4651 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Main Mode security association was established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4652 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Main Mode negotiation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4653 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Main Mode negotiation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4654 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Quick Mode negotiation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4655 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Main Mode security association ended"}
            }
        }
        else if [logx][wineventlog][event_id] == 4656 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A handle to an object was requested"}
            }
        }
        else if [logx][wineventlog][event_id] == 4657 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A registry value was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4658 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The handle to an object was closed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4659 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A handle to an object was requested with intent to delete"}
            }
        }
        else if [logx][wineventlog][event_id] == 4660 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An object was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4661 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A handle to an object was requested"}
            }
        }
        else if [logx][wineventlog][event_id] == 4662 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An operation was performed on an object"}
            }
        }
        else if [logx][wineventlog][event_id] == 4663 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to access an object"}
            }
        }
        else if [logx][wineventlog][event_id] == 4664 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to create a hard link"}
            }
        }
        else if [logx][wineventlog][event_id] == 4665 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to create an application client context."}
            }
        }
        else if [logx][wineventlog][event_id] == 4666 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An application attempted an operation"}
            }
        }
        else if [logx][wineventlog][event_id] == 4667 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An application client context was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4668 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An application was initialized"}
            }
        }
        else if [logx][wineventlog][event_id] == 4670 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Permissions on an object were changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4671 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An application attempted to access a blocked ordinal through the TBS"}
            }
        }
        else if [logx][wineventlog][event_id] == 4672 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Special privileges assigned to new logon"}
            }
        }
        else if [logx][wineventlog][event_id] == 4673 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A privileged service was called"}
            }
        }
        else if [logx][wineventlog][event_id] == 4674 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An operation was attempted on a privileged object"}
            }
        }
        else if [logx][wineventlog][event_id] == 4675 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "SIDs were filtered"}
            }
        }
        else if [logx][wineventlog][event_id] == 4688 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A new process has been created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4689 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A process has exited"}
            }
        }
        else if [logx][wineventlog][event_id] == 4690 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to duplicate a handle to an object"}
            }
        }
        else if [logx][wineventlog][event_id] == 4691 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Indirect access to an object was requested"}
            }
        }
        else if [logx][wineventlog][event_id] == 4692 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Backup of data protection master key was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4693 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Recovery of data protection master key was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4694 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Protection of auditable protected data was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4695 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Unprotection of auditable protected data was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4696 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A primary token was assigned to process"}
            }
        }
        else if [logx][wineventlog][event_id] == 4697 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A service was installed in the system"}
            }
        }
        else if [logx][wineventlog][event_id] == 4698 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A scheduled task was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4699 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A scheduled task was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4700 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A scheduled task was enabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4701 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A scheduled task was disabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4702 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A scheduled task was updated"}
            }
        }
        else if [logx][wineventlog][event_id] == 4703 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A token right was adjusted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4704 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user right was assigned"}
            }
        }
        else if [logx][wineventlog][event_id] == 4705 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user right was removed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4706 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A new trust was created to a domain"}
            }
        }
        else if [logx][wineventlog][event_id] == 4707 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A trust to a domain was removed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4709 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services was started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4710 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services was disabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4711 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine (1%)"}
            }
        }
        else if [logx][wineventlog][event_id] == 4712 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services encountered a potentially serious failure"}
            }
        }
        else if [logx][wineventlog][event_id] == 4713 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Kerberos policy was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4714 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Encrypted data recovery policy was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4715 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The audit policy (SACL) on an object was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4716 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Trusted domain information was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4717 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "System security access was granted to an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4718 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "System security access was removed from an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4719 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "System audit policy was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4720 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4722 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was enabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4723 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to change an account's password"}
            }
        }
        else if [logx][wineventlog][event_id] == 4724 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to reset an accounts password"}
            }
        }
        else if [logx][wineventlog][event_id] == 4725 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was disabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4726 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4727 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled global group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4728 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-enabled global group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4729 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-enabled global group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4730 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled global group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4731 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled local group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4732 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-enabled local group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4733 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-enabled local group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4734 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled local group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4735 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled local group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4737 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled global group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4738 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4739 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Domain Policy was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4740 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was locked out"}
            }
        }
        else if [logx][wineventlog][event_id] == 4741 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A computer account was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4742 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A computer account was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4743 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A computer account was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4744 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled local group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4745 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled local group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4746 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-disabled local group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4747 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-disabled local group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4748 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled local group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4749 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled global group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4750 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled global group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4751 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-disabled global group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4752 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-disabled global group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4753 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled global group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4754 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled universal group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4755 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled universal group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4756 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-enabled universal group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4757 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-enabled universal group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4758 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled universal group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4759 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled universal group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4760 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled universal group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4761 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a security-disabled universal group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4762 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a security-disabled universal group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4763 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-disabled universal group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4764 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A groups type was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4765 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "SID History was added to an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4766 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt to add SID History to an account failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4767 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user account was unlocked"}
            }
        }
        else if [logx][wineventlog][event_id] == 4768 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos authentication ticket (TGT) was requested"}
            }
        }
        else if [logx][wineventlog][event_id] == 4769 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos service ticket was requested"}
            }
        }
        else if [logx][wineventlog][event_id] == 4770 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos service ticket was renewed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4771 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Kerberos pre-authentication failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4772 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos authentication ticket request failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4773 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos service ticket request failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4774 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An account was mapped for logon"}
            }
        }
        else if [logx][wineventlog][event_id] == 4775 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An account could not be mapped for logon"}
            }
        }
        else if [logx][wineventlog][event_id] == 4776 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The domain controller attempted to validate the credentials for an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4777 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The domain controller failed to validate the credentials for an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4778 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A session was reconnected to a Window Station"}
            }
        }
        else if [logx][wineventlog][event_id] == 4779 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A session was disconnected from a Window Station"}
            }
        }
        else if [logx][wineventlog][event_id] == 4780 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The ACL was set on accounts which are members of administrators groups"}
            }
        }
        else if [logx][wineventlog][event_id] == 4781 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The name of an account was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4782 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The password hash an account was accessed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4783 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A basic application group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4784 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A basic application group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4785 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was added to a basic application group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4786 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A member was removed from a basic application group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4787 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A non-member was added to a basic application group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4788 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A non-member was removed from a basic application group."}
            }
        }
        else if [logx][wineventlog][event_id] == 4789 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A basic application group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4790 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An LDAP query group was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4791 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A basic application group was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4792 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An LDAP query group was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4793 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Password Policy Checking API was called"}
            }
        }
        else if [logx][wineventlog][event_id] == 4794 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to set the Directory Services Restore Mode administrator password"}
            }
        }
        else if [logx][wineventlog][event_id] == 4797 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to query the existence of a blank password for an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4798 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user's local group membership was enumerated."}
            }
        }
        else if [logx][wineventlog][event_id] == 4799 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security-enabled local group membership was enumerated"}
            }
        }
        else if [logx][wineventlog][event_id] == 4800 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The workstation was locked"}
            }
        }
        else if [logx][wineventlog][event_id] == 4801 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The workstation was unlocked"}
            }
        }
        else if [logx][wineventlog][event_id] == 4802 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The screen saver was invoked"}
            }
        }
        else if [logx][wineventlog][event_id] == 4803 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The screen saver was dismissed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4816 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "RPC detected an integrity violation while decrypting an incoming message"}
            }
        }
        else if [logx][wineventlog][event_id] == 4817 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Auditing settings on object were changed."}
            }
        }
        else if [logx][wineventlog][event_id] == 4818 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Proposed Central Access Policy does not grant the same access permissions as the current Central Access Policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 4819 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Central Access Policies on the machine have been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4820 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos Ticket-granting-ticket (TGT) was denied because the device does not meet the access control restrictions"}
            }
        }
        else if [logx][wineventlog][event_id] == 4821 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Kerberos service ticket was denied because the user: device: or both does not meet the access control restrictions"}
            }
        }
        else if [logx][wineventlog][event_id] == 4822 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "NTLM authentication failed because the account was a member of the Protected User group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4823 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "NTLM authentication failed because access control restrictions are required"}
            }
        }
        else if [logx][wineventlog][event_id] == 4824 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Kerberos preauthentication by using DES or RC4 failed because the account was a member of the Protected User group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4825 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A user was denied the access to Remote Desktop. By default: users are allowed to connect only if they are members of the Remote Desktop Users group or Administrators group"}
            }
        }
        else if [logx][wineventlog][event_id] == 4826 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Boot Configuration Data loaded"}
            }
        }
        else if [logx][wineventlog][event_id] == 4830 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "SID History was removed from an account"}
            }
        }
        else if [logx][wineventlog][event_id] == 4864 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A namespace collision was detected"}
            }
        }
        else if [logx][wineventlog][event_id] == 4865 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A trusted forest information entry was added"}
            }
        }
        else if [logx][wineventlog][event_id] == 4866 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A trusted forest information entry was removed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4867 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A trusted forest information entry was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4868 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The certificate manager denied a pending certificate request"}
            }
        }
        else if [logx][wineventlog][event_id] == 4869 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services received a resubmitted certificate request"}
            }
        }
        else if [logx][wineventlog][event_id] == 4870 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services revoked a certificate"}
            }
        }
        else if [logx][wineventlog][event_id] == 4871 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services received a request to publish the certificate revocation list (CRL)"}
            }
        }
        else if [logx][wineventlog][event_id] == 4872 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services published the certificate revocation list (CRL)"}
            }
        }
        else if [logx][wineventlog][event_id] == 4873 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A certificate request extension changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4874 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "One or more certificate request attributes changed."}
            }
        }
        else if [logx][wineventlog][event_id] == 4875 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services received a request to shut down"}
            }
        }
        else if [logx][wineventlog][event_id] == 4876 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services backup started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4877 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services backup completed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4878 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services restore started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4879 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services restore completed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4880 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4881 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services stopped"}
            }
        }
        else if [logx][wineventlog][event_id] == 4882 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The security permissions for Certificate Services changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4883 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services retrieved an archived key"}
            }
        }
        else if [logx][wineventlog][event_id] == 4884 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services imported a certificate into its database"}
            }
        }
        else if [logx][wineventlog][event_id] == 4885 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The audit filter for Certificate Services changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4886 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services received a certificate request"}
            }
        }
        else if [logx][wineventlog][event_id] == 4887 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services approved a certificate request and issued a certificate"}
            }
        }
        else if [logx][wineventlog][event_id] == 4888 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services denied a certificate request"}
            }
        }
        else if [logx][wineventlog][event_id] == 4889 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services set the status of a certificate request to pending"}
            }
        }
        else if [logx][wineventlog][event_id] == 4890 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The certificate manager settings for Certificate Services changed."}
            }
        }
        else if [logx][wineventlog][event_id] == 4891 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A configuration entry changed in Certificate Services"}
            }
        }
        else if [logx][wineventlog][event_id] == 4892 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A property of Certificate Services changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4893 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services archived a key"}
            }
        }
        else if [logx][wineventlog][event_id] == 4894 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services imported and archived a key"}
            }
        }
        else if [logx][wineventlog][event_id] == 4895 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services published the CA certificate to Active Directory Domain Services"}
            }
        }
        else if [logx][wineventlog][event_id] == 4896 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "One or more rows have been deleted from the certificate database"}
            }
        }
        else if [logx][wineventlog][event_id] == 4897 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Role separation enabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 4898 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services loaded a template"}
            }
        }
        else if [logx][wineventlog][event_id] == 4899 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Certificate Services template was updated"}
            }
        }
        else if [logx][wineventlog][event_id] == 4900 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Certificate Services template security was updated"}
            }
        }
        else if [logx][wineventlog][event_id] == 4902 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Per-user audit policy table was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 4904 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to register a security event source"}
            }
        }
        else if [logx][wineventlog][event_id] == 4905 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt was made to unregister a security event source"}
            }
        }
        else if [logx][wineventlog][event_id] == 4906 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The CrashOnAuditFail value has changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4907 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Auditing settings on object were changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4908 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Special Groups Logon table modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4909 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The local policy settings for the TBS were changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4910 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The group policy settings for the TBS were changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4911 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Resource attributes of the object were changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4912 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Per User Audit Policy was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4913 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Central Access Policy on the object was changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4928 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An Active Directory replica source naming context was established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4929 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An Active Directory replica source naming context was removed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4930 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An Active Directory replica source naming context was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4931 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An Active Directory replica destination naming context was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4932 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Synchronization of a replica of an Active Directory naming context has begun"}
            }
        }
        else if [logx][wineventlog][event_id] == 4933 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Synchronization of a replica of an Active Directory naming context has ended"}
            }
        }
        else if [logx][wineventlog][event_id] == 4934 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Attributes of an Active Directory object were replicated"}
            }
        }
        else if [logx][wineventlog][event_id] == 4935 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Replication failure begins"}
            }
        }
        else if [logx][wineventlog][event_id] == 4936 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Replication failure ends"}
            }
        }
        else if [logx][wineventlog][event_id] == 4937 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A lingering object was removed from a replica"}
            }
        }
        else if [logx][wineventlog][event_id] == 4944 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following policy was active when the Windows Firewall started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4945 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A rule was listed when the Windows Firewall started"}
            }
        }
        else if [logx][wineventlog][event_id] == 4946 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to Windows Firewall exception list. A rule was added"}
            }
        }
        else if [logx][wineventlog][event_id] == 4947 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to Windows Firewall exception list. A rule was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 4948 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to Windows Firewall exception list. A rule was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 4949 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall settings were restored to the default values"}
            }
        }
        else if [logx][wineventlog][event_id] == 4950 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Firewall setting has changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4951 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A rule has been ignored because its major version number was not recognized by Windows Firewall"}
            }
        }
        else if [logx][wineventlog][event_id] == 4952 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Parts of a rule have been ignored because its minor version number was not recognized by Windows Firewall"}
            }
        }
        else if [logx][wineventlog][event_id] == 4953 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A rule has been ignored by Windows Firewall because it could not parse the rule"}
            }
        }
        else if [logx][wineventlog][event_id] == 4954 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall Group Policy settings has changed. The new settings have been applied"}
            }
        }
        else if [logx][wineventlog][event_id] == 4956 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall has changed the active profile"}
            }
        }
        else if [logx][wineventlog][event_id] == 4957 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall did not apply the following rule"}
            }
        }
        else if [logx][wineventlog][event_id] == 4958 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall did not apply the following rule because the rule referred to items not configured on this computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 4960 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec dropped an inbound packet that failed an integrity check"}
            }
        }
        else if [logx][wineventlog][event_id] == 4961 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec dropped an inbound packet that failed a replay check"}
            }
        }
        else if [logx][wineventlog][event_id] == 4962 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec dropped an inbound packet that failed a replay check"}
            }
        }
        else if [logx][wineventlog][event_id] == 4963 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec dropped an inbound clear text packet that should have been secured"}
            }
        }
        else if [logx][wineventlog][event_id] == 4964 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Special groups have been assigned to a new logon"}
            }
        }
        else if [logx][wineventlog][event_id] == 4965 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec received a packet from a remote computer with an incorrect Security Parameter Index (SPI)."}
            }
        }
        else if [logx][wineventlog][event_id] == 4976 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "During Main Mode negotiation: IPsec received an invalid negotiation packet."}
            }
        }
        else if [logx][wineventlog][event_id] == 4977 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "During Quick Mode negotiation: IPsec received an invalid negotiation packet."}
            }
        }
        else if [logx][wineventlog][event_id] == 4978 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "During Extended Mode negotiation: IPsec received an invalid negotiation packet."}
            }
        }
        else if [logx][wineventlog][event_id] == 4979 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Main Mode and Extended Mode security associations were established."}
            }
        }
        else if [logx][wineventlog][event_id] == 4980 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Main Mode and Extended Mode security associations were established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4981 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Main Mode and Extended Mode security associations were established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4982 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Main Mode and Extended Mode security associations were established"}
            }
        }
        else if [logx][wineventlog][event_id] == 4983 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Extended Mode negotiation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4984 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Extended Mode negotiation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 4985 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The state of a transaction has changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5024 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service has started successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 5025 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service has been stopped"}
            }
        }
        else if [logx][wineventlog][event_id] == 5027 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service was unable to retrieve the security policy from the local storage"}
            }
        }
        else if [logx][wineventlog][event_id] == 5028 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service was unable to parse the new security policy."}
            }
        }
        else if [logx][wineventlog][event_id] == 5029 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service failed to initialize the driver"}
            }
        }
        else if [logx][wineventlog][event_id] == 5030 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service failed to start"}
            }
        }
        else if [logx][wineventlog][event_id] == 5031 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Service blocked an application from accepting incoming connections on the network."}
            }
        }
        else if [logx][wineventlog][event_id] == 5032 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Windows Firewall was unable to notify the user that it blocked an application from accepting incoming connections on the network"}
            }
        }
        else if [logx][wineventlog][event_id] == 5033 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Driver has started successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 5034 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Driver has been stopped"}
            }
        }
        else if [logx][wineventlog][event_id] == 5035 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Driver failed to start"}
            }
        }
        else if [logx][wineventlog][event_id] == 5037 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Firewall Driver detected critical runtime error. Terminating"}
            }
        }
        else if [logx][wineventlog][event_id] == 5038 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Code integrity determined that the image hash of a file is not valid"}
            }
        }
        else if [logx][wineventlog][event_id] == 5039 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A registry key was virtualized."}
            }
        }
        else if [logx][wineventlog][event_id] == 5040 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. An Authentication Set was added."}
            }
        }
        else if [logx][wineventlog][event_id] == 5041 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. An Authentication Set was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5042 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. An Authentication Set was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5043 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Connection Security Rule was added"}
            }
        }
        else if [logx][wineventlog][event_id] == 5044 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Connection Security Rule was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5045 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Connection Security Rule was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5046 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Crypto Set was added"}
            }
        }
        else if [logx][wineventlog][event_id] == 5047 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Crypto Set was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5048 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A change has been made to IPsec settings. A Crypto Set was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5049 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Security Association was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5050 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An attempt to programmatically disable the Windows Firewall using a call to INetFwProfile.FirewallEnabled(FALSE)"}
            }
        }
        else if [logx][wineventlog][event_id] == 5051 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A file was virtualized"}
            }
        }
        else if [logx][wineventlog][event_id] == 5056 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic self test was performed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5057 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic primitive operation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5058 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Key file operation"}
            }
        }
        else if [logx][wineventlog][event_id] == 5059 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Key migration operation"}
            }
        }
        else if [logx][wineventlog][event_id] == 5060 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Verification operation failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5061 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Cryptographic operation"}
            }
        }
        else if [logx][wineventlog][event_id] == 5062 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A kernel-mode cryptographic self test was performed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5063 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic provider operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5064 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic context operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5065 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic context modification was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5066 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic function operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5067 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic function modification was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5068 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic function provider operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5069 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic function property operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5070 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A cryptographic function property operation was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5071 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Key access denied by Microsoft key distribution service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5120 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "OCSP Responder Service Started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5121 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "OCSP Responder Service Stopped"}
            }
        }
        else if [logx][wineventlog][event_id] == 5122 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Configuration entry changed in the OCSP Responder Service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5123 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A configuration entry changed in the OCSP Responder Service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5124 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A security setting was updated on OCSP Responder Service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5125 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A request was submitted to OCSP Responder Service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5126 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Signing Certificate was automatically updated by the OCSP Responder Service"}
            }
        }
        else if [logx][wineventlog][event_id] == 5127 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The OCSP Revocation Provider successfully updated the revocation information"}
            }
        }
        else if [logx][wineventlog][event_id] == 5136 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5137 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was created"}
            }
        }
        else if [logx][wineventlog][event_id] == 5138 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was undeleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5139 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was moved"}
            }
        }
        else if [logx][wineventlog][event_id] == 5140 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A network share object was accessed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5141 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was deleted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5142 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A network share object was added."}
            }
        }
        else if [logx][wineventlog][event_id] == 5143 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A network share object was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5144 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A network share object was deleted."}
            }
        }
        else if [logx][wineventlog][event_id] == 5145 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A network share object was checked to see whether client can be granted desired access"}
            }
        }
        else if [logx][wineventlog][event_id] == 5146 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has blocked a packet"}
            }
        }
        else if [logx][wineventlog][event_id] == 5147 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A more restrictive Windows Filtering Platform filter has blocked a packet"}
            }
        }
        else if [logx][wineventlog][event_id] == 5148 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has detected a DoS attack and entered a defensive mode; packets associated with this attack will be discarded."}
            }
        }
        else if [logx][wineventlog][event_id] == 5149 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The DoS attack has subsided and normal processing is being resumed."}
            }
        }
        else if [logx][wineventlog][event_id] == 5150 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has blocked a packet."}
            }
        }
        else if [logx][wineventlog][event_id] == 5151 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A more restrictive Windows Filtering Platform filter has blocked a packet."}
            }
        }
        else if [logx][wineventlog][event_id] == 5152 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform blocked a packet"}
            }
        }
        else if [logx][wineventlog][event_id] == 5153 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A more restrictive Windows Filtering Platform filter has blocked a packet"}
            }
        }
        else if [logx][wineventlog][event_id] == 5154 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has permitted an application or service to listen on a port for incoming connections"}
            }
        }
        else if [logx][wineventlog][event_id] == 5155 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has blocked an application or service from listening on a port for incoming connections"}
            }
        }
        else if [logx][wineventlog][event_id] == 5156 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has allowed a connection"}
            }
        }
        else if [logx][wineventlog][event_id] == 5157 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has blocked a connection"}
            }
        }
        else if [logx][wineventlog][event_id] == 5158 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has permitted a bind to a local port"}
            }
        }
        else if [logx][wineventlog][event_id] == 5159 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The Windows Filtering Platform has blocked a bind to a local port"}
            }
        }
        else if [logx][wineventlog][event_id] == 5168 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Spn check for SMB/SMB2 fails."}
            }
        }
        else if [logx][wineventlog][event_id] == 5169 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5170 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A directory service object was modified during a background cleanup task"}
            }
        }
        else if [logx][wineventlog][event_id] == 5376 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Credential Manager credentials were backed up"}
            }
        }
        else if [logx][wineventlog][event_id] == 5377 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Credential Manager credentials were restored from a backup"}
            }
        }
        else if [logx][wineventlog][event_id] == 5378 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The requested credentials delegation was disallowed by policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 5379 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Credential Manager credentials were read"}
            }
        }
        else if [logx][wineventlog][event_id] == 5380 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Vault Find Credential"}
            }
        }
        else if [logx][wineventlog][event_id] == 5381 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Vault credentials were read"}
            }
        }
        else if [logx][wineventlog][event_id] == 5382 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Vault credentials were read"}
            }
        }
        else if [logx][wineventlog][event_id] == 5440 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following callout was present when the Windows Filtering Platform Base Filtering Engine started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5441 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following filter was present when the Windows Filtering Platform Base Filtering Engine started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5442 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following provider was present when the Windows Filtering Platform Base Filtering Engine started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5443 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following provider context was present when the Windows Filtering Platform Base Filtering Engine started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5444 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The following sub-layer was present when the Windows Filtering Platform Base Filtering Engine started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5446 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Filtering Platform callout has been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5447 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Filtering Platform filter has been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5448 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Filtering Platform provider has been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5449 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Filtering Platform provider context has been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5450 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Windows Filtering Platform sub-layer has been changed"}
            }
        }
        else if [logx][wineventlog][event_id] == 5451 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Quick Mode security association was established"}
            }
        }
        else if [logx][wineventlog][event_id] == 5452 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec Quick Mode security association ended"}
            }
        }
        else if [logx][wineventlog][event_id] == 5453 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An IPsec negotiation with a remote computer failed because the IKE and AuthIP IPsec Keying Modules (IKEEXT) service is not started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5456 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine applied Active Directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5457 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to apply Active Directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5458 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine applied locally cached copy of Active Directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5459 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to apply locally cached copy of Active Directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5460 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine applied local registry storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5461 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to apply local registry storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5462 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to apply some rules of the active IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5463 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine polled for changes to the active IPsec policy and detected no changes"}
            }
        }
        else if [logx][wineventlog][event_id] == 5464 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine polled for changes to the active IPsec policy: detected changes: and applied them to IPsec Services"}
            }
        }
        else if [logx][wineventlog][event_id] == 5465 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine received a control for forced reloading of IPsec policy and processed the control successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 5466 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine polled for changes to the Active Directory IPsec policy: determined that Active Directory cannot be reached: and will use the cached copy of the Active Directory IPsec policy instead"}
            }
        }
        else if [logx][wineventlog][event_id] == 5467 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine polled for changes to the Active Directory IPsec policy: determined that Active Directory can be reached: and found no changes to the policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 5468 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine polled for changes to the Active Directory IPsec policy: determined that Active Directory can be reached: found changes to the policy: and applied those changes"}
            }
        }
        else if [logx][wineventlog][event_id] == 5471 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine loaded local storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5472 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to load local storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5473 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine loaded directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5474 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to load directory storage IPsec policy on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5477 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "PAStore Engine failed to add quick mode filter"}
            }
        }
        else if [logx][wineventlog][event_id] == 5478 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services has started successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 5479 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services has been shut down successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 5480 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services failed to get the complete list of network interfaces on the computer"}
            }
        }
        else if [logx][wineventlog][event_id] == 5483 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services failed to initialize RPC server. IPsec Services could not be started"}
            }
        }
        else if [logx][wineventlog][event_id] == 5484 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services has experienced a critical failure and has been shut down"}
            }
        }
        else if [logx][wineventlog][event_id] == 5485 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "IPsec Services failed to process some IPsec filters on a plug-and-play event for network interfaces"}
            }
        }
        else if [logx][wineventlog][event_id] == 5632 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A request was made to authenticate to a wireless network"}
            }
        }
        else if [logx][wineventlog][event_id] == 5633 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A request was made to authenticate to a wired network"}
            }
        }
        else if [logx][wineventlog][event_id] == 5712 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A Remote Procedure Call (RPC) was attempted"}
            }
        }
        else if [logx][wineventlog][event_id] == 5888 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An object in the COM+ Catalog was modified"}
            }
        }
        else if [logx][wineventlog][event_id] == 5889 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An object was deleted from the COM+ Catalog"}
            }
        }
        else if [logx][wineventlog][event_id] == 5890 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "An object was added to the COM+ Catalog"}
            }
        }
        else if [logx][wineventlog][event_id] == 6144 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Security policy in the group policy objects has been applied successfully"}
            }
        }
        else if [logx][wineventlog][event_id] == 6145 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "One or more errors occured while processing security policy in the group policy objects"}
            }
        }
        else if [logx][wineventlog][event_id] == 6272 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server granted access to a user"}
            }
        }
        else if [logx][wineventlog][event_id] == 6273 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server denied access to a user"}
            }
        }
        else if [logx][wineventlog][event_id] == 6274 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server discarded the request for a user"}
            }
        }
        else if [logx][wineventlog][event_id] == 6275 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server discarded the accounting request for a user"}
            }
        }
        else if [logx][wineventlog][event_id] == 6276 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server quarantined a user"}
            }
        }
        else if [logx][wineventlog][event_id] == 6277 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server granted access to a user but put it on probation because the host did not meet the defined health policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 6278 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server granted full access to a user because the host met the defined health policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 6279 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server locked the user account due to repeated failed authentication attempts"}
            }
        }
        else if [logx][wineventlog][event_id] == 6280 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Network Policy Server unlocked the user account"}
            }
        }
        else if [logx][wineventlog][event_id] == 6281 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Code Integrity determined that the page hashes of an image file are not valid..."}
            }
        }
        else if [logx][wineventlog][event_id] == 6400 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: Received an incorrectly formatted response while discovering availability of content."}
            }
        }
        else if [logx][wineventlog][event_id] == 6401 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: Received invalid data from a peer. Data discarded."}
            }
        }
        else if [logx][wineventlog][event_id] == 6402 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: The message to the hosted cache offering it data is incorrectly formatted."}
            }
        }
        else if [logx][wineventlog][event_id] == 6403 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: The hosted cache sent an incorrectly formatted response to the client's message to offer it data."}
            }
        }
        else if [logx][wineventlog][event_id] == 6404 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: Hosted cache could not be authenticated using the provisioned SSL certificate."}
            }
        }
        else if [logx][wineventlog][event_id] == 6405 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: %2 instance(s) of event id %1 occurred."}
            }
        }
        else if [logx][wineventlog][event_id] == 6406 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "%1 registered to Windows Firewall to control filtering for the following:"}
            }
        }
        else if [logx][wineventlog][event_id] == 6408 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Registered product %1 failed and Windows Firewall is now controlling the filtering for %2."}
            }
        }
        else if [logx][wineventlog][event_id] == 6409 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "BranchCache: A service connection point object could not be parsed"}
            }
        }
        else if [logx][wineventlog][event_id] == 6410 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Code integrity determined that a file does not meet the security requirements to load into a process. This could be due to the use of shared sections or other issues"}
            }
        }
        else if [logx][wineventlog][event_id] == 6416 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A new external device was recognized by the system."}
            }
        }
        else if [logx][wineventlog][event_id] == 6417 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The FIPS mode crypto selftests succeeded"}
            }
        }
        else if [logx][wineventlog][event_id] == 6418 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The FIPS mode crypto selftests failed"}
            }
        }
        else if [logx][wineventlog][event_id] == 6419 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A request was made to disable a device"}
            }
        }
        else if [logx][wineventlog][event_id] == 6420 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A device was disabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 6421 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A request was made to enable a device"}
            }
        }
        else if [logx][wineventlog][event_id] == 6422 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "A device was enabled"}
            }
        }
        else if [logx][wineventlog][event_id] == 6423 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The installation of this device is forbidden by system policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 6424 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "The installation of this device was allowed: after having previously been forbidden by policy"}
            }
        }
        else if [logx][wineventlog][event_id] == 8191 {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "Highest System-Defined Audit Message Value"}
            }
        }
        else {
            mutate {
                add_field => {"[logx][wineventlog][event_name]" => "None"}
            }
        }

        if [logx][wineventlog][event_id] == 4663 {
            if [logx][wineventlog][event_data][AccessMask] == "0x1" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "read"}
                    add_field => {"[logx][wineventlog][access_description]" => "For a file object, the right to read the corresponding file data. For a directory object, the right to read the corresponding directory data.\n For a directory, the right to list the contents of the directory.\n For registry objects, this is, Query key value."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x2" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "write"}
                    add_field => {"[logx][wineventlog][access_description]" => "For a file object, the right to write data to the file.\n For a directory object, the right to create a file in the directory.\n For registry objects, this is, Set key value."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x4" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "append"}
                    add_field => {"[logx][wineventlog][access_description]" => "For a file object, the right to append data to the file. (For local files, write operations will not overwrite existing data if this flag is specified without FILE_WRITE_DATA.)\n For a directory object, the right to create a subdirectory.\n For a named pipe, the right to create a pipe."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x8" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "read_extended_attributes"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to read extended file attributes.\n For registry objects, this is, Enumerate sub-keys."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x10" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "write_extended_attributes"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to write extended file attributes."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x20" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "execute"}
                    add_field => {"[logx][wineventlog][access_description]" => "For a native code file, the right to execute the file. This access right given to scripts may cause the script to be executable, depending on the script interpreter.\n For a directory, the right to traverse the directory. By default, users are assigned the BYPASS_TRAVERSE_CHECKING privilege, which ignores the FILE_TRAVERSE access right."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x40" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "delete_child"}
                    add_field => {"[logx][wineventlog][access_description]" => "For a directory, the right to delete a directory and all the files it contains, including read-only files."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x80" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "read_attributes"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to read file attributes."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x100" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "write_attributes"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to write file attributes."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x10000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "delete"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to delete the object."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x20000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "read_control"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to read the information in the object's security descriptor, not including the information in the system access control list (SACL)."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x40000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "write_dac"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to modify the discretionary access control list (DACL) in the object's security descriptor."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x80000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "write_owner"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to change the owner in the object's security descriptor"}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x100000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "synchronize"}
                    add_field => {"[logx][wineventlog][access_description]" => "The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right."}
                }
            }
            else if [logx][wineventlog][event_data][AccessMask] == "0x1000000" {
                mutate {
                    add_field => {"[logx][wineventlog][access_type]" => "access_sys_sec"}
                    add_field => {"[logx][wineventlog][access_description]" => "The ACCESS_SYS_SEC access right controls the ability to get or set the SACL in an object's security descriptor."}
                }
            }
        }
        if [logx][wineventlog][event_id] == 4625 {
            if [logx][wineventlog][event_data][FailureReason] == "%%2305" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "The specified user account has expired."}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2309" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "The specified account's password has expired"}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2310" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "Account currently disabled"}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2311" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "Account logon time restriction violation"}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2312" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "User not allowed to logon at this computer"}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2313" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "Unknown user name or bad password"}
                }
            }
            else if [logx][wineventlog][event_data][FailureReason] == "%%2304" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "An Error occurred during Logon"}
                }
            }
            else {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][FailureReasonDescription]" => "None"}
                }
            }
            if [logx][wineventlog][event_data][Status] == "0xC0000234" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Account locked out"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000193" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Account expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000133" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Clocks out of sync"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000224" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Password change required"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xc000015b" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "User does not have logon right"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xc000006d" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Logon failure"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xc000006e" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Account restriction"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xc00002ee" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "An error occurred during logon"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000071" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Password expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000072" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Account disabled"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC0000413" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Authentication firewall prohibits logon"}
                }
            }
            else {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "None"}
                }
            }
            if [logx][wineventlog][event_data][SubStatus] == "0xC0000234" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Account locked out"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000193" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Account expired"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000133" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Clocks out of sync"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000224" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Password change required"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc000015b" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "User does not have logon right"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc000006d" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Logon failure"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc000006e" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Account restriction"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc00002ee" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "An error occurred during logon"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000071" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Password expired"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000072" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Account disabled"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xC0000413" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Authentication firewall prohibits logon"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc000006a" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Incorrect password"}
                }
            }
            else if [logx][wineventlog][event_data][SubStatus] == "0xc0000064" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "Account does not exist"}
                }
            }
            else {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][SubStatusDescription]" => "None"}
                }
            }
        }
        if [logx][wineventlog][event_id] == 4771 {
            if [logx][wineventlog][event_data][Status] == "0x1" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Client's entry in database has expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Server's entry in database has expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x3" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Requested protocol version not supported"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x4" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Client's key encrypted in old master key"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x5" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Server's key encrypted in old master key"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x6" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Client not found in Kerberos database"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x7" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Server not found in Kerberos database"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x8" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Multiple principal entries in database"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x9" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "The client or server has a null key"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xA" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Ticket not eligible for postdating"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xB" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Requested start time is later than end time"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xC" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC policy rejects request"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xD" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC cannot accommodate requested option"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xE" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC has no support for encryption type"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0xF" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC has no support for checksum type"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x10" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC has no support for padata type"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x11" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "KDC has no support for transited type"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x12" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Clients credentials have been revoked"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x13" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Credentials for server have been revoked"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x14" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "TGT has been revoked"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x15" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Client not yet valid - try again later"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x16" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Server not yet valid - try again later"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x17" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Password has expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x18" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Pre-authentication information was invalid"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x19" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Additional pre-authentication required"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x1F" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Integrity check on decrypted field failed"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x20" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Ticket expired"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x21" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Ticket not yet valid"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x22" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Request is a replay"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x23" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "The ticket isn't for us"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x24" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Ticket and authenticator don't match"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x25" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Clock skew too great"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x26" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Incorrect net address"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x27" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Protocol version mismatch"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x28" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Invalid msg type"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x29" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Message stream modified"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2A" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Message out of order"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2C" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Specified version of key is not available"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2D" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Service key not available"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2E" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Mutual authentication failed"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x2F" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Incorrect message direction"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x30" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Alternative authentication method required"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x31" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Incorrect sequence number in message"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x32" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Inappropriate type of checksum in message"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x3C" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Generic error (description in e-text)"}
                }
            }
            else if [logx][wineventlog][event_data][Status] == "0x3D" {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "Field is too long for this implementation"}
                }
            }
            else {
                mutate {
                    add_field => {"[logx][wineventlog][event_data][StatusDescription]" => "None"}
                }
            }
        }
    }
}
